<?php

namespace App\Repositories;

use App\Entities;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MovementRepository extends \Doctrine\ORM\EntityRepository
{
    use \LaravelDoctrine\ORM\Pagination\PaginatesFromRequest;

    /**
     *
     */
    function lastest($perPage = 5, $pageName= "page") 
    {
        $builder = $this->createQueryBuilder('o');
        $builder->orderBy('o.created' , 'DESC');

        return $this->paginate($builder->getQuery(), $perPage, $pageName);
    }

    /**
     * @param Entity\Area $area
     */
    function fromArea(Entities\Area $area, $perPage = 5, $pageName= "page") 
    {
        $builder = $this->createQueryBuilder('m');
        $builder->innerJoin('m.order', 'o')
                ->innerJoin('o.area', 'a')
                ->andWhere('a.id = :id')
                ->orderBy('o.created' , 'DESC')
                ->setParameters([
                    'id' => $area
                ]);

        return $this->paginate($builder->getQuery(), $perPage, $pageName);
    }

    /**
     * @param Entity\Supplier $supplier
     */
    function fromSupplier(Entities\Supplier $supplier, $perPage = 5, $pageName= "page") 
    {
        $builder = $this->createQueryBuilder('m');
        $builder->innerJoin('m.order', 'o')
                ->innerJoin('o.products', 'p')
                ->innerJoin('p.supplier', 's')
                ->andWhere('s.id = :id')
                ->orderBy('o.created' , 'DESC')
                ->setParameters([
                    'id' => $supplier
                ]);

        return $this->paginate($builder->getQuery(), $perPage, $pageName);
    }

    /**
     *
     */
    function search(
        $sequence = null, 
        $from = null, 
        $to = null, 
        $area = null, 
        $otype = null, 
        $mtype = null, 
        $sortBy = null, 
        $sort = null, 
        $perPage = 10, 
        $pageName= "page")
    {
        $builder = $this->createQueryBuilder('m')
                        ->innerJoin('m.order', 'o');

        if ($sequence !== null) {
            $builder->andWhere("o.sequence LIKE :sequence")
                    ->setParameter('sequence', "%{$sequence}%");
        }
        if ($from !== null) {
            $builder->andWhere("m.created >= :from")
                ->setParameter('from', $from);
        }
        if ($to !== null) {
            $builder->andWhere("m.created <= :to")
                ->setParameter('to', $to);
        }
        if ($area !== null) {
            $builder->andWhere("o.area = :area")
                ->setParameter('area', $area);
        }
        if ($otype !== null) {
            $builder->innerJoin('o.area', 'a')
                    ->andWhere("a.type = :otype")
                    ->setParameter('otype', $otype);
        }
        if ($mtype !== null) {
            $builder->andWhere("m.type = :mtype")
                ->setParameter('mtype', $mtype);
        }

        $builder->orderBy("m.{$sortBy}" , $sort);

        return $this->paginate($builder->getQuery(), $perPage, $pageName);
    }
}

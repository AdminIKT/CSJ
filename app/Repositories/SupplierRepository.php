<?php

namespace App\Repositories;

/**
 * SupplierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SupplierRepository extends \Doctrine\ORM\EntityRepository
{
    use \LaravelDoctrine\ORM\Pagination\PaginatesFromRequest;

    /**
     * @param array{
     *   nif: string,
     *   name: string,
     *   city: string,
     *   recommendable: boolean,
     *   acceptable: boolean,
     *   sortBy: string,
     *   sort: string
     * } $filter
     * @param int $perPage
     * @param string $pageName
     */
    function search(array $filter = [], $perPage = 10, $pageName= "page")
    {
        $b = $this->createQueryBuilder('supplier');

        if (isset($filter['nif']) &&
            null !== ($nif = $filter['nif'])) {
            $b->andWhere("supplier.nif LIKE :nif")
              ->setParameter('nif', "%{$nif}%");
        }
        if (isset($filter['name']) &&
            null !== ($name = $filter['name'])) {
            $b->andWhere("supplier.name LIKE :name")
              ->setParameter('name', "%{$name}%");
        }
        if (isset($filter['city']) &&
            null !== ($city = $filter['city'])) {
            $b->andWhere("supplier.city LIKE :city")
              ->setParameter('city', "%{$city}%");
        }
        if (isset($filter['recommendable']) &&
            null !== ($recommendable = $filter['recommendable'])) {
            $b->andWhere("supplier.recommendable = :recommendable")
              ->setParameter('recommendable', $recommendable);
        }
        if (isset($filter['acceptable']) &&
            null !== ($acceptable = $filter['acceptable'])) {
            $b->andWhere("supplier.acceptable = :acceptable")
              ->setParameter('acceptable', $acceptable);
        }

        $b->orderBy(
            array_key_exists('sortBy', $filter) ?
                    $filter['sortBy'] : 'supplier.name',
            array_key_exists('sort', $filter) ?
                    $filter['sort'] : 'DESC'
        );

        if (!$perPage) {
            $perPage = clone $b;
            $perPage = $perPage->select('count(supplier.id)')
                               ->getQuery()
                               ->getSingleScalarResult();
        }

        return $this->paginate(
            $b->getQuery(), 
            $perPage ?: Config('app.per_page'), 
            $pageName);
    }

    /**
     * @return array
     */
    function cities()
    {
        $query = $this->getEntityManager()
                      ->createQuery("
        SELECT DISTINCT(s.city) as cities FROM App\Entities\Supplier s
        WHERE LENGTH(s.city) > 1
        GROUP BY cities ORDER BY cities ASC");

        return $query->getResult(\Doctrine\ORM\AbstractQuery::HYDRATE_SCALAR_COLUMN);
    }
}

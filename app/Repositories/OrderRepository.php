<?php

namespace App\Repositories;

use App\Entities;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderRepository extends \Doctrine\ORM\EntityRepository
{
    use \LaravelDoctrine\ORM\Pagination\PaginatesFromRequest;

    const PER_PAGE = 10;

    /**
     *
     */
    function search(
        $sequence = null, 
        $from = null, 
        $to = null, 
        $area = null, 
        $supplier = null, 
        $type = null, 
        $status = null, 
        $sortBy = null, 
        $sort = null, 
        $perPage = self::PER_PAGE, 
        $pageName= "page")
    {
        $builder = $this->createQueryBuilder('o');
        if ($sequence !== null) {
            $builder->andWhere("o.sequence LIKE :sequence")
                    ->setParameter('sequence', "%{$sequence}%");
        }
        if ($from !== null) {
            $builder->andWhere("o.date >= :from")
                ->setParameter('from', $from);
        }
        if ($to !== null) {
            $builder->andWhere("o.date <= :to")
                ->setParameter('to', $to);
        }
        if ($area !== null) {
            $builder->andWhere("o.area = :area")
                ->setParameter('area', $area);
        }
        if ($supplier !== null) {
            $builder->andWhere("o.supplier = :supplier")
                    ->setParameter('supplier', $supplier);
        }
        if ($type !== null) {
            $builder->innerJoin('o.area', 'a')
                    ->andWhere("a.type = :type")
                    ->setParameter('type', $type);
        }
        if ($status !== null) {
            $builder->andWhere("o.status = :status")
                ->setParameter('status', $status);
        }

        if (!$perPage) {
            $perPage = clone $builder;
            $perPage = $perPage->select('count(o.id)')->getQuery()->getSingleScalarResult();
        }

        return $this->paginate($builder->getQuery(), $perPage ?: self::PER_PAGE, $pageName);
    }
}
